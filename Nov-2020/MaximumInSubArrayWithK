Given an array of integers and a number k, where 1 <= k <= length of the array, compute the maximum values of each subarray of length k.

For example, given array = [10, 5, 2, 7, 8, 7] and k = 3, we should get: [10, 7, 8, 8], 

static ArrayList <Integer> max_of_subarrays(int arr[], int n, int k)
    {
             ArrayList<Integer> ans = new ArrayList<Integer>();
        Deque<Integer> queue = new LinkedList<>();
        for (int i = 0; i < k; i++) {
            while (!queue.isEmpty() && arr[queue.peekLast()] <= arr[i]) {
                queue.removeLast();
            }
            queue.addLast(i);
        }
        for(int i=k;i<n;i++){
              ans.add(arr[queue.peekFirst()]);
              while(!queue.isEmpty() && queue.peekFirst()<=i-k){
                     queue.removeFirst();
              }
            while (!queue.isEmpty() && arr[queue.peekLast()] <= arr[i]) {
                queue.removeLast();
            }
            queue.addLast(i);
        }
        ans.add(arr[queue.peekFirst()]);

        return ans;
    }
