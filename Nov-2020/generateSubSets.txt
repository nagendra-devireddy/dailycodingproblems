package backtracking;

/**
 * Given a number in the form of a list of digits, return all possible permutations.
 * For example, given [1,2,3], return [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].
 */
public class GenerateSubSets {


    void generateSubSets(int[] arr) {
        int[] ans = new int[arr.length];
        generateSubSetsHelper(arr, 0,arr.length-1);
    }

    private void generateSubSetsHelper(int[] arr, int left, int right) {

        if(left==right){
            for(int i=0;i<arr.length;i++){
                System.out.print(arr[i]+" ");
            }
            System.out.println();
            return;
        }

        for (int i = left; i <=right; i++) {
            swapElementsAtIndex(i, left,arr);
            generateSubSetsHelper(arr,left+1,right);
            swapElementsAtIndex(i, left,arr);
        }

    }

    private void swapElementsAtIndex(int index, int swapIndex, int[] arr) {

        int temp=arr[swapIndex];
        arr[swapIndex]=arr[index];
        arr[index]=temp;

    }

    public static void main(String args[]) {

        int[] arr = {1, 2, 3};
        GenerateSubSets subSets = new GenerateSubSets();
        subSets.generateSubSets(arr);
    }
}
